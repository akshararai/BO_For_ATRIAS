function f = fn_simVNMC_RC(model, set_t, rtp, sim_t, param)


nms_MechInit_2D;
setCtrlPar_2D;  % v_parOffR


%%%%% sim with plateDist

terrain_rough   = 10;

nStep_start = MMRstim(1);
stimA       = MMRstim(2);
stim_tStart	= MMRstim(3);
stim_tMid	= MMRstim(4);
stim_tEnd   = MMRstim(5);

paramSets = Simulink.BlockDiagram.modifyTunableParameters(rtp, ...
            'theta0',                	theta0, ...
            'FPCtrlPar',                FPCtrlPar, ...
            'LLCtrlPar',                LLCtrlPar, ...
            'StCtrlPar',                StCtrlPar, ...
            'SwCtrlPar',                SwCtrlPar, ...
            'TrCtrlPar',                TrCtrlPar, ...
            'nStep_start',              nStep_start, ...
            'stimA',                    stimA, ...
            'stim_tStart',            	stim_tStart, ...
            'stim_tMid',                stim_tMid, ...
            'stim_tEnd',                stim_tEnd, ...
            'terrain_rough',            terrain_rough);

try
    simout = sim(model, ...
                'RapidAcceleratorParameterSets',    paramSets,...
                'RapidAcceleratorUpToDateCheck',    'off',...
                'TimeOut',                          sim_t*5,...
                'SaveOutput',                       'on');
catch exception
%     exception.message
    simout  = [];
end
flag = simout_flag.signals.values;

if flag == 1        
    f = c_A2*simout_ACT2.signals.values ...
        + c_v*abs(goal_v-simout_v.signals.values) ...
        + c_P*sum(simout_pain.signals.values);
    
else
    if simout_hipPEnd.signals.values >= maxDist
        f = 1e6 + sum(simout_v_SSdist.signals.values);
    else
        f = 2*1e6 - simout_hipPEnd.signals.values;
    end
end

f = f + sum(v_parOffR);
